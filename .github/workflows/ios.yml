name: iOS Starter Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-14

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode Version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.1" # Matches your local Xcode version

      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          if [ -z "$scheme_list" ]; then
            echo "Error: xcodebuild did not return valid JSON."
            exit 1
          fi
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default

      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # Select an available iPhone simulator (e.g., iPhone 16)
          device=$(xcrun xctrace list devices 2>&1 | grep -oE 'iPhone 16[^ ]*' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//")
          if [ -z "$device" ]; then
            echo "Error: No suitable iPhone simulator found."
            exit 1
          fi
          if [ "$scheme" = "default" ]; then scheme=$(cat default); fi
          if [ "$(ls -A | grep -i \\.xcworkspace$)" ]; then filetype_parameter="workspace" && file_to_build="$(ls -A | grep -i \\.xcworkspace$)"; else filetype_parameter="project" && file_to_build="$(ls -A | grep -i \\.xcodeproj$)"; fi
          file_to_build=$(echo $file_to_build | awk '{$1=$1;print}')
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"

      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: 'iOS Simulator'
        run: |
          # Select the same iPhone simulator as in the Build step
          device=$(xcrun xctrace list devices 2>&1 | grep -oE 'iPhone 16[^ ]*' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//")
          if [ -z "$device" ]; then
            echo "Error: No suitable iPhone simulator found."
            exit 1
          fi
          if [ "$scheme" = "default" ]; then scheme=$(cat default); fi
          if [ "$(ls -A | grep -i \\.xcworkspace$)" ]; then filetype_parameter="workspace" && file_to_build="$(ls -A | grep -i \\.xcworkspace$)"; else filetype_parameter="project" && file_to_build="$(ls -A | grep -i \\.xcodeproj$)"; fi
          file_to_build=$(echo $file_to_build | awk '{$1=$1;print}')
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"